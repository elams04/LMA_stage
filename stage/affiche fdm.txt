# ordre 2 à 2k
temps=[0.04+0.001*i for i in range(0,30)]
alpha=[c*dt/dx for dt in temps]

# Préparation des données
erreurs_par_ordre = []
labels = []
for j in range(1, k + 1):
    Erreur = []
    for t in temps:
        valeur_erreur = erreur_2(j, t)
        if valeur_erreur == float("inf"):
            Erreur.append(seuil)
            break
        Erreur.append(valeur_erreur)
    erreurs_par_ordre.append(Erreur)
    labels.append(f'ordre {2 * j}')

# Création de la figure
fig, ax = plt.subplots()
plt.subplots_adjust(left=0.25)  # Laisser de l'espace pour les widgets

# Tracer les courbes
courbes = []
for j, Erreur in enumerate(erreurs_par_ordre):
    curve, = ax.plot(alpha[:len(Erreur)], Erreur, 'x', label=labels[j])
    courbes.append(curve)

# Configuration des axes
ax.set_xlabel("alpha")
ax.set_ylabel("Erreur")
ax.set_title("Erreur en fonction du CFL FDM pour différents ordres")
ax.legend()
ax.grid(True)

# Création des cases à cocher
rax = plt.axes([0.01, 0.4, 0.2, 0.3])  # Position des cases à cocher
check = CheckButtons(rax, labels, [True] * len(labels))

# Fonction pour gérer la visibilité des courbes
def toggle_visibility(label):
    index = labels.index(label)
    courbes[index].set_visible(not courbes[index].get_visible())
    plt.draw()

# Connecter les cases à cocher
check.on_clicked(toggle_visibility)

# Afficher le graphique
plt.show()
    